##
# This is a CloudFormation template to build the AWS infrastructure for an AWS CodePipeline CI/CD pipeline
# with associated AWS CodeBuild stages and S3 bucket for pipeline artifacts.
#
#
#
AWSTemplateFormatVersion: 2010-09-09

Description: 'Creates a CodePipeline to deploy our serverless framework stack'

Parameters:
  Environment:
    AllowedValues:
    - dev
    - uat
    - prod
    Description: Environment
    Type: String
    Default: dev

  CodePipelineBucketPrefix:
    Description: CodePipeline needs a utility bucket for its internal use. Specify a unique prefix for the bucket name
    Type: String
    Default: codepipeline-

  CodeCommitRepo:
    Type: String
    Description:  Our proxy codecommit repo in form  repo/branch
    Default: fargate-ansible-runner/master

  ECRegistry:
    Type: String
    Description: Name of the ECR registry to push to
    Default: fargate-ansible-runner

Resources:
  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codebuild.amazonaws.com"
          Action: "sts:AssumeRole"

  DeployRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codepipeline.amazonaws.com"
          Action: "sts:AssumeRole"

  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codepipeline.amazonaws.com"
          Action: "sts:AssumeRole"

  CodeBuildPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub CodeBuildPolicy-${AWS::StackName}-${Environment}
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - 'logs:*'
            - 'codebuild:*'
            - 's3:*'
            - ecr:BatchCheckLayerAvailability
            - ecr:CompleteLayerUpload
            - ecr:GetAuthorizationToken
            - ecr:InitiateLayerUpload
            - ecr:PutImage
            - ecr:UploadLayerPart
          Resource: "*"
      Roles:
        - !Ref CodeBuildRole

  DeployPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub DeployPolicy-${AWS::StackName}-${Environment}
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - 'logs:*'
            - 'ecs:*'
            - ecr:CompleteLayerUpload
            - ecr:GetAuthorizationToken
            - ecr:InitiateLayerUpload
            - ecr:PutImage
            - ecr:UploadLayerPart
            - iam:Get*
            - iam:AddRoleToInstanceProfile
            - iam:AttachRolePolicy
            - iam:ListAttachedRolePolicies
            - iam:CreateAccountAlias
            - iam:CreateInstanceProfile
            - iam:CreateRole
            - iam:CreatePolicy
            - iam:CreatePolicyVersion
            - iam:DeleteAccountAlias
            - iam:DeleteInstanceProfile
            - iam:DeleteRole
            - iam:DeleteRolePolicy
            - iam:DetachRolePolicy
            - iam:DeletePolicy
            - iam:ListPolicyVersions
            - iam:PassRole
            - iam:PutRolePolicy
            - iam:RemoveRoleFromInstanceProfile
            - iam:UpdateAccountPasswordPolicy
          Resource: "*"
      Roles:
        - !Ref DeployRole

  CodePipelinePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub CodePipelinePolicy-${AWS::StackName}-${Environment}
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:putObject
            - s3:getObject
            - codebuild:*
            - codecommit:*
          Resource:
            - "*"
      Roles:
        - !Ref CodePipelineRole

  CloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}

  AmazonCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !Sub
            - arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}
            - RepositoryName: !Select [0, !Split [ "/" , !Ref CodeCommitRepo ]]
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Select [1, !Split [ "/" , !Ref CodeCommitRepo ]]
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
          RoleArn: !GetAtt CloudWatchEventRole.Arn
          Id: codepipeline-AppPipeline

  ##
  # S3 bucket used by CodePipeline
  #
  S3:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub ${AWS::AccountId}-runner-${CodePipelineBucketPrefix}${Environment}

  BitbucketConnection:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName: !Sub Bitbucket-${Environment}
      ProviderType: Bitbucket

  # Build/Package stage of our pipeline - thanks to CodeBuild
  #
  Build:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub ${AWS::StackName}-Build
      Description: Build and package lambda functions using the Serverless Framework.
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        BuildSpec: "buildspec.yml"
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true  # required for docker builds
        EnvironmentVariables:
          - Name: env
            Type: PLAINTEXT
            Value: !Ref Environment
          - Name: IMAGE_REPO_NAME
            Type: PLAINTEXT
            Value: !Ref ECRegistry
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref AWS::AccountId
        Image: aws/codebuild/standard:4.0
      Artifacts:
        Type: CODEPIPELINE

  ##
  # CodePipeline with its stages
  #
  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub ${AWS::StackName}-pipeline
      ArtifactStore:
        Location: !Ref S3
        Type: S3
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:

        # Stage 1:  Get the source from Bitbucket:
        - Name: Source
          Actions:
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !Select [0, !Split [ "/" , !Ref CodeCommitRepo ]]
                BranchName: !Select [1, !Split [ "/" , !Ref CodeCommitRepo ]]
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: artifactSourceCode

        # Stage 2:  Build the container image and push to ECR
        - Name: Build
          Actions:
            - Name: Build
              RunOrder: 1
              InputArtifacts:
                - Name: artifactSourceCode
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName:  !Ref Build
              OutputArtifacts:
                - Name: artifactBuild

        # Stage 3:  Deploy the container image to a task definition
        - Name: Deploy
          Actions:
            - Name: TaskDefinitionDeployment
              RunOrder: 1
              InputArtifacts:
                - Name: artifactBuild
                - Name: artifactSourceCode
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub ${AWS::StackName}-task-deploy
                Capabilities: CAPABILITY_IAM
                RoleArn: !GetAtt DeployRole.Arn
                TemplatePath: artifactSourceCode::cloudformation/runner.yml
                TemplateConfiguration: artifactBuild::config.json

  BuildNotificationSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-Build

  BuildNotificationSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: 2008-10-17
        Id: CodeStar_Notifications
        Statement:
          - Sid: "__default_statement_ID"
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:GetTopicAttributes
              - SNS:SetTopicAttributes
              - SNS:AddPermission
              - SNS:RemovePermission
              - SNS:DeleteTopic
              - SNS:Subscribe
              - SNS:ListSubscriptionsByTopic
              - SNS:Publish
              - SNS:Receive
            Resource: !Ref BuildNotificationSNS
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref AWS::AccountId
          - Sid: AWSCodeStarNotifications_publish
            Effect: Allow
            Principal:
              Service: codestar-notifications.amazonaws.com
            Action:
              - SNS:Publish
            Resource: !Ref BuildNotificationSNS
      Topics:
        - !Ref BuildNotificationSNS

  BuildNotification:
    Type: AWS::CodeStarNotifications::NotificationRule
    Properties:
            Name: Notification Rule for CodeBuild
            DetailType: BASIC
            Resource: !GetAtt Build.Arn
            EventTypeIds:
                - codebuild-project-build-state-failed
                - codebuild-project-build-state-succeeded
                - codebuild-project-build-state-stopped
            Targets:
                - TargetType: SNS
                  TargetAddress: !Ref BuildNotificationSNS

Outputs:
  CodeBuild:
    Value: !Ref Pipeline
  Environment:
    Value: !Ref Environment
  CodeCommitRepo:
    Value: !Ref CodeCommitRepo
  CodeBuildRole:
    Value: !Ref CodeBuildRole
  CodeBuildPolicy:
    Value: !Ref CodeBuildPolicy
  CodePipelineRole:
    Value: !Ref CodePipelineRole
  CodePipelinePolicy:
    Value: !Ref CodePipelinePolicy
  S3:
    Value: !Ref S3
