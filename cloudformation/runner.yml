AWSTemplateFormatVersion: '2010-09-09'

Description: Origin runner in Fargate

Parameters:
  ImageDigest:
    Type: String
    Description: The digest to use with the Container image

  ECRepository:
    Type: String
    Description: The name of the ECR repository
    Default: fargate-ansible-runner

  Ec2KeySSM:
    Type: String
    Description: Name of an SSM parameter to get the SSH key from
    Default: /ec2_key/fargate-ansible-runner

  NamingPrefix:
    Description: Naming prefix for anything that needs to be differentiated
    Type: String
    Default: ansible-fargate

Resources:
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${NamingPrefix}-Cluster

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Statement:
              - Sid: LogAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Sid: EcrAccess
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ContainerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ansible-service
          PolicyDocument:
            Statement:
              - Sid: LogAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Sid: CloudformationAccess
                Effect: Allow
                Resource: '*'
                Action:
                  - cloudformation:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - cloudwatch:*
                  - s3:*
                  - sns:*
                  - config:*
                  - route53:*
                  - kms:DescribeKey
                  - kms:GenerateRandom
                  - kms:Get*
                  - kms:List*
                  - kms:ReEncrypt*
                  - kms:CreateKey
                  - kms:PutKeyPolicy
                  - kms:CreateAlias
                  - kms:DeleteAlias
                  - kms:ScheduleKeyDeletion
                  - lambda:*
                  - logs:*
                  - cloudtrail:*
                  - iam:Get*
                  - iam:AddRoleToInstanceProfile
                  - iam:AttachRolePolicy
                  - iam:ListAttachedRolePolicies
                  - iam:CreateAccountAlias
                  - iam:CreateInstanceProfile
                  - iam:CreateRole
                  - iam:CreatePolicy
                  - iam:CreatePolicyVersion
                  - iam:DeleteAccountAlias
                  - iam:DeleteInstanceProfile
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
                  - iam:DeletePolicy
                  - iam:ListPolicyVersions
                  - iam:PassRole
                  - iam:PutRolePolicy
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:UpdateAccountPasswordPolicy
              - Sid: SSMParameterAccess
                Effect: Allow
                Action:
                  - ssm:GetParametersByPath
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
              - Sid: KMSDecryptSSMParams
                Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm

  EventInvokeECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ansible-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ecs:RunTask
                Resource:
                  - !Ref RunnerTask
              - Effect: Allow
                Action: iam:PassRole
                Resource: '*'
                Condition:
                  StringLike:
                    iam:PassedToService: ecs-tasks.amazonaws.com

  # EventInvokeLambdaRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - events.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     Path: "/"
  #     Policies:
  #       - PolicyName: lambda-service
  #         PolicyDocument:
  #           Statement:
  #             - Effect: Allow
  #               Action: ecs:RunTask
  #               Resource:
  #                 - !Ref RunnerTask
  #             - Effect: Allow
  #               Action: iam:PassRole
  #               Resource: '*'
  #               Condition:
  #                 StringLike:
  #                   iam:PassedToService: ecs-tasks.amazonaws.com

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AsgLifeCycle
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: ecs:RunTask
              Resource:
                - !Ref RunnerTask
            - Effect: Allow
              Action: iam:PassRole
              Resource: '*'
              Condition:
                StringLike:
                  iam:PassedToService: ecs-tasks.amazonaws.com

  RunnerTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Family: ansible-runner
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref ContainerRole
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: ansible-runner
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRepository}@${ImageDigest}
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: fargate-ansible-runner
              awslogs-create-group: true
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: container
          Environment:
            - Name: Playbook
              Value: site.yml
            - Name: AWSregion
              Value: !Ref AWS::Region
            - Name: Ec2KeySSM
              Value: !Ref Ec2KeySSM

  ScheduledEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Run the task on a schedule
      ScheduleExpression: cron(0 14 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt EcsCluster.Arn
          Id: !Sub ${NamingPrefix}-runner-scheduled-event
          RoleArn: !GetAtt EventInvokeECSRole.Arn
          EcsParameters:
            LaunchType: FARGATE
            NetworkConfiguration:
               AwsVpcConfiguration:
                  AssignPublicIp: DISABLED
                  SecurityGroups:
                    - Fn::ImportValue: !Sub ${NamingPrefix}-RunnerSg
                  Subnets:
                    - Fn::ImportValue: !Sub ${NamingPrefix}-PrvSubnetA
                    - Fn::ImportValue: !Sub ${NamingPrefix}-PrvSubnetB
                    - Fn::ImportValue: !Sub ${NamingPrefix}-PrvSubnetC
            PlatformVersion: "1.4.0"
            TaskCount: 1
            TaskDefinitionArn: !Ref RunnerTask

  LifecycleEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Run the task on an auto-scaling lifecycle launch event
      EventPattern:
        source:
          - aws.autoscaling
        detail-type:
          - EC2 Instance-launch Lifecycle Action
        detail:
          AutoScalingGroupName:
            - Fn::ImportValue: !Sub ${NamingPrefix}-AsgName
      State: ENABLED
      Targets:
        - Arn: !GetAtt LifeCycleLambda.Arn
          Id: !Sub ${NamingPrefix}-runner-lifecycle-event
          # RoleArn: !GetAtt LambdaExecutionRole.Arn
        # - Arn: !GetAtt EcsCluster.Arn
        #   Id: !Sub ${NamingPrefix}-runner-lifecycle-event
        #   RoleArn: !GetAtt EventInvokeECSRole.Arn
        #   EcsParameters:
        #     LaunchType: FARGATE
        #     NetworkConfiguration:
        #        AwsVpcConfiguration:
        #           AssignPublicIp: DISABLED
        #           SecurityGroups:
        #             - Fn::ImportValue: !Sub ${NamingPrefix}-RunnerSg
        #           Subnets:
        #             - Fn::ImportValue: !Sub ${NamingPrefix}-PrvSubnetA
        #             - Fn::ImportValue: !Sub ${NamingPrefix}-PrvSubnetB
        #             - Fn::ImportValue: !Sub ${NamingPrefix}-PrvSubnetC
        #     PlatformVersion: "1.4.0"
        #     TaskCount: 1
        #     TaskDefinitionArn: !Ref RunnerTask
        #   InputTransformer:
        #     InputPathsMap:
        #       AsgName: $.detail.AutoScalingGroupName
        #       HookName: $.detail.LifecycleHookName
        #       ActionToken: $.detail.LifecycleActionToken
        #     InputTemplate: "{\"containerOverrides\":[{\"name\":\"ansible-runner\",\"environment\":[{\"Name\":\"Playbook\",\"Value\":\"lifecycle.yml\"},{\"Name\":\"ASG_NAME\",\"Value\":<AsgName>},{\"Name\":\"HOOK_NAME\",\"Value\":<HookName>},{\"Name\":\"ACTION_TOKEN\",\"Value\":<ActionToken>}]}]}"

  LifeCycleLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      Description: Sends complete lifecycle action to ASG
      FunctionName: !Sub ${NamingPrefix}-asg-lifecycle
      Handler: index.lambdaHandler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: '10'
      Environment:
        Variables:
          Playbook: lifecycle.yml
          CLUSTER: !Ref EcsCluster
          SUBNET_A:
            Fn::ImportValue: !Sub ${NamingPrefix}-PrvSubnetA
          SUBNET_B:
            Fn::ImportValue: !Sub ${NamingPrefix}-PrvSubnetB
          SUBNET_C:
            Fn::ImportValue: !Sub ${NamingPrefix}-PrvSubnetC
          SECURITY_GROUP:
            Fn::ImportValue: !Sub ${NamingPrefix}-RunnerSg
      Code:
        ZipFile: |
          import sys
          import logging
          import boto3
          import json
          import os

          logger = logging.getLogger()
          logger.setLevel('INFO')

          def lambdaHandler(event, context):
              logger.info("event: %s" % json.dumps(event))

              detail = event['detail']
              subnetA = os.environ.get("SUBNET_A")
              subnetB = os.environ.get("SUBNET_B")
              subnetC = os.environ.get("SUBNET_C")
              securityGroup = os.environ.get("SECURITY_GROUP")

              ecs = boto3.client('ecs')

              network = {
                  'awsvpcConfiguration': {
                      'subnets': [
                          subnetA,
                          subnetB,
                          subnetC
                      ],
                      'securityGroups': [
                          securityGroup
                      ],
                      'assignPublicIp': 'DISABLED'
                  }
              }

              overrides = {
                  'containerOverrides': [
                      {
                          'name': 'ansible-runner',
                          'environment': [
                              {
                                  'name': 'Playbook',
                                  'value': os.environ.get("Playbook")
                              },
                              {
                                  'name': 'ASG_NAME',
                                  'value': detail['AutoScalingGroupName']
                              },
                              {
                                  'name': 'HOOK_NAME',
                                  'value': detail['LifecycleHookName']
                              },
                              {
                                  'name': 'ACTION_TOKEN',
                                  'value': detail['LifecycleActionToken']
                              },
                          ]
                      }
                  ]
              }

              response = ecs.run_task(
                  cluster = os.environ.get("CLUSTER"),
                  taskDefinition='ansible-runner',
                  launchType='FARGATE',
                  networkConfiguration=network,
                  overrides=overrides
              )

              # Output an indication of the running task
              if len(response['tasks']) > 0:
                  for container in response['tasks'][0]['containers']:
                      logger.info(f"Name: {container['name']}")
                      logger.info(f"Image: {container['image']}")
                      logger.info(f"Status: {container['lastStatus']}")
              else:
                  logger.info("No tasks started")

  LifecycleLambdaPolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LifeCycleLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LifecycleEventRule.Arn

Outputs:
  TaskDefinition:
    Description: ARN of the task definition
    Value: !Ref RunnerTask
    Export:
      Name: !Sub ${NamingPrefix}-TaskArn
